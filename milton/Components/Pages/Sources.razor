@page "/sources"
@using Microsoft.EntityFrameworkCore
@inject ProductDbContext Db

@rendermode InteractiveServer


<h2 class="text-xl font-semibold mb-4">Scrape Sources Admin</h2>

<MudTextField @bind-Value="newSource.SourceName" Placeholder="Source name (e.g. TrophiesDirect)" Class="mb-2" />
<MudTextField @bind-Value="newSource.Url" Placeholder="URL to scrape" Class="mb-2" />
<MudTextField @bind-Value="newSource.Category" Placeholder="Optional category" Class="mb-2" />
<MudButton OnClick="AddSource">Add Source</MudButton>



<MudSelect TOption="string"
    @bind-Value="selectedSource" 
    Label="Filter by Source" 
    Class="mb-4" 
    Style="width: 300px;"
              @onchange="(args) => OnSourceChanged(args.Value?.ToString())"
    >
    <option value="">-- All Sources --</option>
    @foreach (var name in sourceNames)
    {
        <option value="@name">@name</option>
    }
</MudSelect>

<MudButton OnClick="ResetFilter" Class="mb-4">Clear Filter</MudButton>

<div>@((MarkupString)msg)</div>

@if (filteredSources == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table-auto w-full mt-4">
        <thead>
            <tr>
                <th class="text-left">Source</th>
                <th class="text-left">URL</th>
                <th class="text-left">Category</th>
                <th class="text-left">Active</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var src in filteredSources)
            {
                <tr>
                    <td>@src.SourceName</td>
                    <td>@(string.Join("/", new Uri(src.Url).Segments.Skip(3)).TrimEnd('/'))</td>
                    <td>@src.Category</td>
                    <td>
                        <MudSwitch @bind-Value="src.Active" OnChange="() => ToggleActive(src)" />
                    </td>
                    <td>
                        <MudButton Appearance="Appearance.Outline" OnClick="() => DeleteSource(src.Id)">Delete</MudButton>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string msg = string.Empty;
    private List<ScrapeSource>? sources;
    private List<ScrapeSource>? filteredSources;
    private ScrapeSource newSource = new();
    private string selectedSource = string.Empty;
    private List<string> sourceNames = new();


    protected override async Task OnInitializedAsync()
    {
        sources = await Db.ScrapeSources.OrderBy(x => x.SourceName).ToListAsync();
        sourceNames = await GetDistinctSourceNamesAsync(); // assume this method exist
        filteredSources = sources; // default
    }

    private void ResetFilter()
    {
        selectedSource = string.Empty;
        filteredSources = sources;
    }

    private void OnSourceChanged(string? newValue)
    {
        selectedSource = newValue ?? string.Empty;
        FilterSources();
    }

    private void FilterSources()
    {
        msg = "selectedSource: " + selectedSource;
        if (string.IsNullOrWhiteSpace(selectedSource))
            filteredSources = sources;
        else
            filteredSources = sources.Where(s => s.SourceName == selectedSource).ToList();
    }

    public async Task<List<string>> GetDistinctSourceNamesAsync()
    {
        return await Db.ScrapeSources
            .Select(s => s.SourceName)
            .Distinct()
            .OrderBy(name => name)
            .ToListAsync();
    }

    private async Task AddSource()
    {
        if (!string.IsNullOrWhiteSpace(newSource.Url))
        {
            Db.ScrapeSources.Add(newSource);
            await Db.SaveChangesAsync();
            sources = await Db.ScrapeSources.OrderBy(x => x.SourceName).ToListAsync();
            newSource = new();
        }
    }

    private async Task ToggleActive(ScrapeSource src)
    {
        src.Active = !src.Active;
        Db.ScrapeSources.Update(src);
        await Db.SaveChangesAsync();
    }

    private async Task DeleteSource(int id)
    {
        var entity = await Db.ScrapeSources.FindAsync(id);
        if (entity != null)
        {
            Db.ScrapeSources.Remove(entity);
            await Db.SaveChangesAsync();
            sources = await Db.ScrapeSources.OrderBy(x => x.SourceName).ToListAsync();
        }
    }
}
