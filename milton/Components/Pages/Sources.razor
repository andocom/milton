@page "/admin/sources"
@using Microsoft.EntityFrameworkCore
@inject ProductDbContext Db

@rendermode InteractiveServer


<h2 class="text-xl font-semibold mb-4">Scrape Sources Admin</h2>

<FluentTextField @bind-Value="newSource.SourceName" Placeholder="Source name (e.g. TrophiesDirect)" Class="mb-2" />
<FluentTextField @bind-Value="newSource.Url" Placeholder="URL to scrape" Class="mb-2" />
<FluentTextField @bind-Value="newSource.Category" Placeholder="Optional category" Class="mb-2" />
<FluentButton OnClick="AddSource">Add Source</FluentButton>

@if (sources == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table-auto w-full mt-4">
        <thead>
            <tr>
                <th class="text-left">Source</th>
                <th class="text-left">URL</th>
                <th class="text-left">Category</th>
                <th class="text-left">Active</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var src in sources)
            {
                <tr>
                    <td>@src.SourceName</td>
                    <td>@src.Url</td>
                    <td>@src.Category</td>
                    <td>
                        <FluentSwitch @bind-Checked="src.Active" OnChange="() => ToggleActive(src)" />
                    </td>
                    <td>
                        <FluentButton Appearance="Appearance.Outline" OnClick="() => DeleteSource(src.Id)">Delete</FluentButton>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ScrapeSource>? sources;
    private ScrapeSource newSource = new();

    protected override async Task OnInitializedAsync()
    {
        sources = await Db.ScrapeSources.OrderBy(x => x.SourceName).ToListAsync();
    }

    private async Task AddSource()
    {
        if (!string.IsNullOrWhiteSpace(newSource.Url))
        {
            Db.ScrapeSources.Add(newSource);
            await Db.SaveChangesAsync();
            sources = await Db.ScrapeSources.OrderBy(x => x.SourceName).ToListAsync();
            newSource = new();
        }
    }

    private async Task ToggleActive(ScrapeSource src)
    {
        src.Active = !src.Active;
        Db.ScrapeSources.Update(src);
        await Db.SaveChangesAsync();
    }

    private async Task DeleteSource(int id)
    {
        var entity = await Db.ScrapeSources.FindAsync(id);
        if (entity != null)
        {
            Db.ScrapeSources.Remove(entity);
            await Db.SaveChangesAsync();
            sources = await Db.ScrapeSources.OrderBy(x => x.SourceName).ToListAsync();
        }
    }
}
