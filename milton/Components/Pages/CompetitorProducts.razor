@page "/competitor-products"
@using milton.Models.CompetitorPrices;
@using milton.Data;

@inject CompetitorProductService CompetitorProductService
@inject ProductService ProductService
@inject CompetitorService CompetitorService

@rendermode InteractiveServer

<MudText Typo="Typo.h3">Competitor SKUs</MudText>

<MudPaper Class="p-1">

    @if (products == null)
    {
        <MudProgressCircular Indeterminate />
    }
    else
    {
        @foreach (var product in products)
        {
            <MudExpansionPanels>
                <MudExpansionPanel Text="@product.Name">
                    <div class="d-flex flex-row flex-wrap gap-1">
                        @foreach (var competitor in competitors)
                        {
                            var compSku = GetCompetitorSku(product.Id, competitor.Id);
                            <div class="d-flex align-items-center">
                                <MudTextField @bind-Value="compSku.CompetitorSKU"
                                              Label="@competitor.Name" 
                                              Immediate="true"
                                              Margin="Margin.Dense"
                                              Variant="Variant.Outlined"
                                              OnBlur="() => SaveSku(compSku)"
                                              Style="width: 150px;" />

                            </div>
                        }
                    </div>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    }
</MudPaper>

@code {

    List<Product> products;
    List<Competitor> competitors;
    List<CompetitorProduct> competitorProducts;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllAsync();
        competitors = await CompetitorService.GetAllAsync();
        competitorProducts = await CompetitorProductService.GetAllAsync();
    }

    CompetitorProduct GetCompetitorSku(int productId, int competitorId)
    {
        var existing = competitorProducts
            .FirstOrDefault(x => x.ProductId == productId && x.CompetitorId == competitorId);

        if (existing == null)
        {
            existing = new CompetitorProduct
                {
                    ProductId = productId,
                    CompetitorId = competitorId,
                    CompetitorSKU = ""
                };
            competitorProducts.Add(existing);
        }

        return existing;
    }

    async Task SaveSku(CompetitorProduct cp)
    {
        if (cp.Id == 0)
            await CompetitorProductService.AddAsync(cp);
        else
            await CompetitorProductService.UpdateAsync(cp);
    }

}
