@page "/competitor-products"
@using milton.Models.CompetitorPrices;
@using milton.Data;

@inject CompetitorProductService CompetitorProductService
@inject ProductService ProductService
@inject CompetitorService CompetitorService

<MudPaper Class="p-4">
    <MudText Typo="Typo.h5">Competitor SKUs</MudText>

    @if (products == null)
    {
        <MudProgressCircular Indeterminate />
    }
    else
    {
        @foreach (var product in products)
        {
            <MudExpansionPanels>
                <MudExpansionPanel Text="@product.Name">
                    @foreach (var competitor in competitors)
                    {
                        var compSku = GetCompetitorSku(product.Id, competitor.Id);

                        <MudTextField @bind-Value="compSku.CompetitorSKU"
                                      Label="@competitor.Name"
                                      Immediate="true"
                                      Class="mb-2"
                                      Style="width: 300px;" />

                        <MudButton Variant="Variant.Filled" OnClick="() => SaveSku(compSku)">
                            Save
                        </MudButton>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    }
</MudPaper>

@code {

List<Product> products;
List<Competitor> competitors;
List<CompetitorProduct> competitorProducts;

protected override async Task OnInitializedAsync()
{
    products = await ProductService.GetAllAsync();
    competitors = await CompetitorService.GetAllAsync();
    competitorProducts = await CompetitorProductService.GetAllAsync();
}

CompetitorProduct GetCompetitorSku(int productId, int competitorId)
{
    var existing = competitorProducts
        .FirstOrDefault(x => x.ProductId == productId && x.CompetitorId == competitorId);

    if (existing == null)
    {
        existing = new CompetitorProduct
        {
            ProductId = productId,
            CompetitorId = competitorId,
            CompetitorSKU = ""
        };
        competitorProducts.Add(existing);
    }

    return existing;
}

async Task SaveSku(CompetitorProduct cp)
{
    if (cp.Id == 0)
        await CompetitorProductService.AddAsync(cp);
    else
        await CompetitorProductService.UpdateAsync(cp);
}

}
