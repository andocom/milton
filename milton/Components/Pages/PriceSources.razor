@page "/pricesources"
@inject PriceSourceService PriceSourceService

<h3>Price Source Admin</h3>

<MudButton OnClick="ToggleAddForm" Appearance="Appearance.Accent">@((showAddForm ? "Cancel" : "Add Source"))</MudButton>

@if (showAddForm)
{
    <EditForm Model="newSource" OnValidSubmit="AddSourceAsync">
        <MudTextField @bind-Value="newSource.Name" Label="Name" />
        <MudSwitch @bind-Value="newSource.Active" Label="Active" />
        <MudButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Save</MudButton>
    </EditForm>
}

<table class="table">
    <thead>
        <tr><th>Name</th><th>Active</th><th>Created</th><th>Actions</th></tr>
    </thead>
    <tbody>
        @foreach (var source in sources)
        {
            <tr>
                <td>@source.Name</td>
                <td>@(source.Active ? "Yes" : "No")</td>
                <td>@source.CreatedAt.ToString("yyyy-MM-dd")</td>
                <td>
                    <MudButton OnClick="() => DeleteSourceAsync(source.Id)" Appearance="Appearance.Outline">Delete</MudButton>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<PriceSource> sources = new();
    private PriceSource newSource = new();
    private bool showAddForm = false;

    protected override async Task OnInitializedAsync()
    {
        sources = await PriceSourceService.GetAllAsync();
    }

    private async Task AddSourceAsync()
    {
        newSource.CreatedAt = DateTime.UtcNow;
        await PriceSourceService.AddAsync(newSource);
        sources = await PriceSourceService.GetAllAsync();
        newSource = new();
        showAddForm = false;
    }

    private async Task DeleteSourceAsync(int id)
    {
        await PriceSourceService.DeleteAsync(id);
        sources = await PriceSourceService.GetAllAsync();
    }

    private void ToggleAddForm() => showAddForm = !showAddForm;
}
