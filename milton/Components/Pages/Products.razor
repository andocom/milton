@page "/products"
@inject ProductService ProductService

<PageTitle>Product Admin</PageTitle>

<h2 class="text-xl font-bold mb-4">Product Management</h2>

<MudCard class="p-4 mb-6">
    <EditForm Model="@newProduct" OnValidSubmit="CreateProduct" FormName="createForm">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <MudTextField @bind-Value="newProduct.Name" Label="Product Name" Required="true" />
            <MudTextField @bind-Value="newProduct.Sku" Label="SKU" Required="true" />
            <MudCheckBox @bind-Value="newProduct.Active">Active</MudCheckBox>
        </div>
        <MudButton Appearance="Appearance.Accent" Type="ButtonType.Submit" class="mt-4">Add Product</MudButton>
    </EditForm>
    <h3 class="text-lg font-semibold mb-2">All Products</h3>
    <table class="w-full text-sm">
        <thead>
            <tr>
                <th class="text-left">Name</th>
                <th class="text-left">SKU</th>
                <th class="text-left">Active</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td><MudTextField @bind-Value="product.Name" /></td>
                    <td><MudTextField @bind-Value="product.Sku" /></td>
                    <td><MudCheckBox @bind-Value="product.Active" /></td>
                    <td>
                        <MudButton Appearance="Appearance.Accent" OnClick="() => UpdateProduct(product)">Update</MudButton>
                        <MudButton Appearance="Appearance.Stealth" OnClick="() => DeleteProduct(product.Id)">Delete</MudButton>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</MudCard>

@code {
    private List<Product> products = new();
    private Product newProduct = new();

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllAsync();
    }

    private async Task CreateProduct()
    {
        await ProductService.AddAsync(newProduct);
        newProduct = new();
        products = await ProductService.GetAllAsync();
    }

    private async Task UpdateProduct(Product product)
    {
        await ProductService.UpdateAsync(product);
    }

    private async Task DeleteProduct(int id)
    {
        await ProductService.DeleteAsync(id);
        products = await ProductService.GetAllAsync();
    }
}
